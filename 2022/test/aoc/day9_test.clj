(ns aoc.day9-test
  (:require [aoc.day9 :as day09]
            [clojure.test :refer :all]))

(def input ["R 4"
            "U 4"
            "L 3"
            "D 1"
            "R 4"
            "D 1"
            "L 5"
            "R 2"])

(deftest part1
  (testing "part01"
    (is (= 13
           (day09/part01 input)))))

(deftest part2
  (testing "part02"
    #_(is (= 1
           (day09/part02 input)))
    (is (= 36
           (day09/part02 ["R 5"
                          "U 8"
                          "L 8"
                          "D 3"
                          "R 17"
                          "D 10"
                          "L 25"
                          "U 20"])))))



; 7068, 8830 too height
; 6183 too low

; 6332 RESPOSTA CERTA

;......
;......
;......
;......
;H.....  (H covers T, s)
;
;== R 4 ==
;
;......
;......
;......
;......
;TH....  (T covers s)
;
;......
;......
;......
;......
;sTH...
;
;......
;......
;......
;......
;s.TH..
;
;......
;......
;......
;......
;s..TH.
;
;== U 4 ==
;
;......
;......
;......
;....H.
;s..T..
;
;......
;......
;....H.
;....T.
;s.....
;
;......
;....H.
;....T.
;......
;s.....
;
;....H.
;....T.
;......
;......
;s.....
;
;== L 3 ==
;
;...H..
;....T.
;......
;......
;s.....
;
;..HT..
;......
;......
;......
;s.....
;
;.HT...
;......
;......
;......
;s.....
;
;== D 1 ==
;
;..T...
;.H....
;......
;......
;s.....
;
;== R 4 ==
;
;..T...   *******
;..H...  [3, 3]
;......
;......
;s.....
;
;..T...
;...H..
;......
;......
;s.....
;
;......
;...TH.
;......
;......
;s.....
;
;......
;....TH
;......
;......
;s.....
;
;== D 1 ==
;
;......
;....T.
;.....H
;......
;s.....
;
;== L 5 ==
;
;......
;....T.
;....H.
;......
;s.....
;
;......
;....T.   [3,4]
;...H..
;......
;s.....
;
;......
;......
;..HT..
;......
;s.....
;
;......
;......
;.HT...
;......
;s.....
;
;......
;......
;HT....
;......
;s.....
;
;== R 2 ==
;
;......
;......
;.H....  (H covers T)
;......
;s.....
;
;......
;......
;.TH...
;......
;s.....
;After simulating the rope, you can count up all of the positions the tail visited at least once. In this diagram, s again marks the starting position (which the tail also visited) and # marks other positions the tail visited:
;
;..##..
;...##.
;.####.
;....#.
;s###..
;So, there are 13 positions the tail visited at least once.
;


;[0 0] [1 0] [2 0] [3 0] [4 1] [4 2] [4 3] [3 2] []
